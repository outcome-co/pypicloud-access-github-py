"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Protocol, Tuple, Type, TypeVar, Union
from types import TracebackType

from pytest import Function
from flaky.flaky_pytest_plugin import FlakyPlugin


ErrInfo = Tuple[Type[Exception], Exception, TracebackType]


class Filter(Protocol):
    def __call__(self, err: ErrInfo, name: str, test: Union[Function], plugin: Union[FlakyPlugin]) -> bool: ...


F = TypeVar('F', bound=Callable[..., Any])


def flaky(max_runs: int =..., min_passes: int =..., rerun_filter: Filter =...) -> Callable[[F], F]:
    """
    Decorator used to mark a test as "flaky". When used in conjuction with
    the flaky nosetests plugin, will cause the decorated test to be retried
    until min_passes successes are achieved out of up to max_runs test runs.

    :param max_runs:
        The maximum number of times the decorated test will be run.
    :type max_runs:
        `int`
    :param min_passes:
        The minimum number of times the test must pass to be a success.
    :type min_passes:
        `int`
    :param rerun_filter:
        Filter function to decide whether a test should be rerun if it fails.
        Function signature is as follows:
            (err, name, test, plugin) -> should_rerun
        - err (`tuple` of `class`, :class:`Exception`, `traceback`):
            Information about the test failure (from sys.exc_info())
        - name (`unicode`):
            The test name
        - test (:class:`nose.case.Test` or :class:`Function`):
            The test that has raised an error
        - plugin (:class:`FlakyNosePlugin` or :class:`FlakyPytestPlugin`):
            The flaky plugin. Has a :prop:`stream` that can be written to in
            order to add to the Flaky Report.
    :type rerun_filter:
        `callable`
    :return:
        A wrapper function that includes attributes describing the flaky test.
    :rtype:
        `callable`
    """
    ...

